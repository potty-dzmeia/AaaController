package org.lz1aq.aaacontroller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Timer;

/**
 *
 * @author Chavdar
 */
public class App extends javax.swing.JFrame
{

    private static final long serialVersionUID = 1L;

    static final int MIN_SWITCHING_PERIOD_IN_MS     = 200;
    static final int DEFAULT_SWITCHING_PERIOD_IN_MS = 1000;
    static final int MAX_SWITCHING_PERIOD_IN_MS     = 60000;
    static final int ANT_1 = 0;
    static final int ANT_2 = 1;
    static final int ANT_3 = 2;
    static final int ANT_4 = 3;
    static final int ANT_NOTSET = -1;
    
    private final AppSettings   appSettings;
    private final SerialComm    serialComm;
    private final DefaultComboBoxModel comPortComboBoxModel;
    private final DefaultComboBoxModel baudRateComboBoxModel;
    
    private Timer switchingTimer;
    private int   currentAnt = 0;  
          
   
    
    /**
     * Constructor
     */
    public App()
    {  
        // Data for the Combo boxes in the settings Dialog
        this.baudRateComboBoxModel = new DefaultComboBoxModel(new String[]
        {
            "1200", "2400", "4800", "9600", "19200", "38400", "57600", "115200"
        });
        this.comPortComboBoxModel = SerialComm.getComportsComboboxModel();

        // Load user settings from the properties file
        appSettings = new AppSettings();

        // Create the object which will take care of sending data through the UART
        serialComm = new SerialComm(); 
        serialComm.open(appSettings.getComPort());
        
        // Init GUI
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jDialogSettings = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jComboBoxComPort = new javax.swing.JComboBox();
        jComboBoxBaudRate = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldCustomCommPort = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jTextFieldAnt4Label = new javax.swing.JTextField();
        jTextFieldAnt1Label = new javax.swing.JTextField();
        jTextFieldAnt3Label = new javax.swing.JTextField();
        jTextFieldAnt2Label = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jButtonCancel = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        buttonGroupInSettings = new javax.swing.ButtonGroup();
        buttonGroupAntennas = new javax.swing.ButtonGroup();
        jDialogPeriodicSwitching = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCheckBoxAnt4 = new javax.swing.JCheckBox();
        jCheckBoxAnt1 = new javax.swing.JCheckBox();
        jCheckBoxAnt2 = new javax.swing.JCheckBox();
        jCheckBoxAnt3 = new javax.swing.JCheckBox();
        jButtonSetPeriodSwitching = new javax.swing.JButton();
        jTextFieldSwitchingPeriodAnt2 = new javax.swing.JTextField();
        jTextFieldSwitchingPeriodAnt3 = new javax.swing.JTextField();
        jTextFieldSwitchingPeriodAnt4 = new javax.swing.JTextField();
        jTextFieldSwitchingPeriodAnt1 = new javax.swing.JTextField();
        jDialogAbout = new javax.swing.JDialog();
        jButtonAboutOk = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        buttonGroupDebugWindow = new javax.swing.ButtonGroup();
        jPanel11 = new javax.swing.JPanel();
        jToggleButtonAnt1 = new javax.swing.JToggleButton();
        jToggleButtonAnt2 = new javax.swing.JToggleButton();
        jToggleButtonAnt3 = new javax.swing.JToggleButton();
        jToggleButtonAnt4 = new javax.swing.JToggleButton();
        jPanel12 = new javax.swing.JPanel();
        jLabelSerialComm = new javax.swing.JLabel();
        jCheckBoxPeriodicSwitching = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuSettigns = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        jDialogSettings.setTitle("Settings");
        jDialogSettings.setAlwaysOnTop(true);
        jDialogSettings.setMinimumSize(new java.awt.Dimension(200, 200));
        jDialogSettings.setModal(true);
        jDialogSettings.addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentShown(java.awt.event.ComponentEvent evt)
            {
                jDialogSettingsComponentShown(evt);
            }
        });
        jDialogSettings.getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("CommPort settings"));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jComboBoxComPort.setModel(this.comPortComboBoxModel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel4.add(jComboBoxComPort, gridBagConstraints);

        jComboBoxBaudRate.setModel(this.getBaudRateComboBoxModel());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel4.add(jComboBoxBaudRate, gridBagConstraints);

        jLabel12.setText("CommPort name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel4.add(jLabel12, gridBagConstraints);

        jLabel13.setText("Baud rate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanel4.add(jLabel13, gridBagConstraints);

        jLabel18.setText("Custom ComPort name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabel18, gridBagConstraints);

        jTextFieldCustomCommPort.setToolTipText("Make sure this field is empty if you don't want to use a custom comport!");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel4.add(jTextFieldCustomCommPort, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Button labels"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTextFieldAnt4Label.setText("ant 4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel3.add(jTextFieldAnt4Label, gridBagConstraints);

        jTextFieldAnt1Label.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldAnt1Label.setText("ant 1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel3.add(jTextFieldAnt1Label, gridBagConstraints);

        jTextFieldAnt3Label.setText("ant 3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel3.add(jTextFieldAnt3Label, gridBagConstraints);

        jTextFieldAnt2Label.setText("ant 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel3.add(jTextFieldAnt2Label, gridBagConstraints);

        jLabel1.setText("Antenna 3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jLabel1, gridBagConstraints);

        jLabel4.setText("Antenna 4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanel3.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Antenna 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jLabel5, gridBagConstraints);

        jLabel6.setText("Antenna 1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 5);
        jPanel5.add(jButtonCancel, gridBagConstraints);

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 2);
        jPanel5.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jDialogSettings.getContentPane().add(jPanel1, gridBagConstraints);

        jDialogPeriodicSwitching.setTitle("Periodic antenna switching");
        jDialogPeriodicSwitching.setAlwaysOnTop(true);
        jDialogPeriodicSwitching.setMinimumSize(new java.awt.Dimension(150, 200));
        jDialogPeriodicSwitching.addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentShown(java.awt.event.ComponentEvent evt)
            {
                jDialogPeriodicSwitchingComponentShown(evt);
            }
            public void componentHidden(java.awt.event.ComponentEvent evt)
            {
                jDialogPeriodicSwitchingComponentHidden(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Antenna");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Period [ms]");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        jCheckBoxAnt4.setText("Ant 4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jCheckBoxAnt4, gridBagConstraints);

        jCheckBoxAnt1.setText("Ant 1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jCheckBoxAnt1, gridBagConstraints);

        jCheckBoxAnt2.setText("Ant 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jCheckBoxAnt2, gridBagConstraints);

        jCheckBoxAnt3.setText("Ant 3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jCheckBoxAnt3, gridBagConstraints);

        jButtonSetPeriodSwitching.setText("Set");
        jButtonSetPeriodSwitching.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSetPeriodSwitchingActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel2.add(jButtonSetPeriodSwitching, gridBagConstraints);

        jTextFieldSwitchingPeriodAnt2.setText("jTextField4");
        jTextFieldSwitchingPeriodAnt2.setToolTipText("Enter a value (200-60000) and press the \"Set\" button.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jTextFieldSwitchingPeriodAnt2, gridBagConstraints);

        jTextFieldSwitchingPeriodAnt3.setText("jTextField5");
        jTextFieldSwitchingPeriodAnt3.setToolTipText("Enter a value (200-60000) and press the \"Set\" button.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jTextFieldSwitchingPeriodAnt3, gridBagConstraints);

        jTextFieldSwitchingPeriodAnt4.setText("jTextField6");
        jTextFieldSwitchingPeriodAnt4.setToolTipText("Enter a value (200-60000) and press the \"Set\" button.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jTextFieldSwitchingPeriodAnt4, gridBagConstraints);

        jTextFieldSwitchingPeriodAnt1.setText("jTextField2");
        jTextFieldSwitchingPeriodAnt1.setToolTipText("Enter a value (200-60000) and press the \"Set\" button.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jTextFieldSwitchingPeriodAnt1, gridBagConstraints);

        javax.swing.GroupLayout jDialogPeriodicSwitchingLayout = new javax.swing.GroupLayout(jDialogPeriodicSwitching.getContentPane());
        jDialogPeriodicSwitching.getContentPane().setLayout(jDialogPeriodicSwitchingLayout);
        jDialogPeriodicSwitchingLayout.setHorizontalGroup(
            jDialogPeriodicSwitchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
        );
        jDialogPeriodicSwitchingLayout.setVerticalGroup(
            jDialogPeriodicSwitchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
        );

        jDialogAbout.setTitle("About");
        jDialogAbout.setAlwaysOnTop(true);
        jDialogAbout.setModal(true);
        jDialogAbout.setResizable(false);

        jButtonAboutOk.setText("OK");
        jButtonAboutOk.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonAboutOkActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Source code available at ");

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("www.active-antenna.eu");
        jTextField1.setToolTipText("");
        jTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("by LZ1AQ");

        jLabel14.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Serial Interface to LZ1AQ's AAA Controller ");

        jTextField3.setEditable(false);
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.setText("github.com/potty-dzmeia/AaaController");

        javax.swing.GroupLayout jDialogAboutLayout = new javax.swing.GroupLayout(jDialogAbout.getContentPane());
        jDialogAbout.getContentPane().setLayout(jDialogAboutLayout);
        jDialogAboutLayout.setHorizontalGroup(
            jDialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                    .addComponent(jButtonAboutOk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField3)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jDialogAboutLayout.setVerticalGroup(
            jDialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addGap(30, 30, 30)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAboutOk)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Serial Interface to LZ1AQ's Active Antenna Amplifier");
        setMinimumSize(new java.awt.Dimension(200, 200));
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Antennas"));
        jPanel11.setLayout(new java.awt.GridBagLayout());

        buttonGroupAntennas.add(jToggleButtonAnt1);
        jToggleButtonAnt1.setText("Ant 1");
        jToggleButtonAnt1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jToggleButtonAnt1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel11.add(jToggleButtonAnt1, gridBagConstraints);

        buttonGroupAntennas.add(jToggleButtonAnt2);
        jToggleButtonAnt2.setText("Ant 2");
        jToggleButtonAnt2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jToggleButtonAnt2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel11.add(jToggleButtonAnt2, gridBagConstraints);

        buttonGroupAntennas.add(jToggleButtonAnt3);
        jToggleButtonAnt3.setText("Ant 3");
        jToggleButtonAnt3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jToggleButtonAnt3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel11.add(jToggleButtonAnt3, gridBagConstraints);

        buttonGroupAntennas.add(jToggleButtonAnt4);
        jToggleButtonAnt4.setText("Ant 4");
        jToggleButtonAnt4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jToggleButtonAnt4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel11.add(jToggleButtonAnt4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        getContentPane().add(jPanel11, gridBagConstraints);

        jPanel12.setLayout(new java.awt.GridBagLayout());

        jLabelSerialComm.setText("Serial Comm:");
        jLabelSerialComm.setMinimumSize(null);
        jLabelSerialComm.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        jPanel12.add(jLabelSerialComm, gridBagConstraints);
        jLabelSerialComm.getAccessibleContext().setAccessibleName("jLabelSerialComm");
        jLabelSerialComm.getAccessibleContext().setAccessibleDescription("");

        jCheckBoxPeriodicSwitching.setText("Periodic switching");
        jCheckBoxPeriodicSwitching.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBoxPeriodicSwitching.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCheckBoxPeriodicSwitchingActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jCheckBoxPeriodicSwitching, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        getContentPane().add(jPanel12, gridBagConstraints);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        jMenuSettigns.setText("Settings");
        jMenuSettigns.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuSettignsActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuSettigns);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jDialogSettingsComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jDialogSettingsComponentShown
    {//GEN-HEADEREND:event_jDialogSettingsComponentShown
        // Settings dialog is shown and we need to set the states of the controls
        initUserSettingsDialog();
    }//GEN-LAST:event_jDialogSettingsComponentShown

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        loadAppState(); // Init the application to the expected state
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        storeMainWindowParams();
        serialComm.close();
    }//GEN-LAST:event_formWindowClosing

    private void jDialogPeriodicSwitchingComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jDialogPeriodicSwitchingComponentShown
    {//GEN-HEADEREND:event_jDialogPeriodicSwitchingComponentShown
        initPeriodicSwtchingDialog();
        
        // Switching logic is inside the Listener
        switchingTimer = new Timer(100, directionSwitchingListener);
        switchingTimer.setRepeats(false);
        switchingTimer.start();
    }//GEN-LAST:event_jDialogPeriodicSwitchingComponentShown

    private void jDialogPeriodicSwitchingComponentHidden(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jDialogPeriodicSwitchingComponentHidden
    {//GEN-HEADEREND:event_jDialogPeriodicSwitchingComponentHidden
        switchingTimer.stop();
        
        if (jCheckBoxPeriodicSwitching.isSelected())
        {
            jCheckBoxPeriodicSwitching.setSelected(false);
        }
    }//GEN-LAST:event_jDialogPeriodicSwitchingComponentHidden

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitMenuItemActionPerformed
    {//GEN-HEADEREND:event_exitMenuItemActionPerformed
        serialComm.close();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jMenuSettignsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSettignsActionPerformed
    {//GEN-HEADEREND:event_jMenuSettignsActionPerformed
        jDialogSettings.pack();
        jDialogSettings.setVisible(true);
    }//GEN-LAST:event_jMenuSettignsActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
        jDialogAbout.pack();
        jDialogAbout.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void jButtonAboutOkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAboutOkActionPerformed
    {//GEN-HEADEREND:event_jButtonAboutOkActionPerformed
        jDialogAbout.setVisible(false);
    }//GEN-LAST:event_jButtonAboutOkActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonCancelActionPerformed
    {//GEN-HEADEREND:event_jButtonCancelActionPerformed
        jDialogSettings.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveActionPerformed
    {//GEN-HEADEREND:event_jButtonSaveActionPerformed
        jDialogSettings.setVisible(false); // Hide the SettingsDialog
        storeSettingsDialogParams(); // Read the state of the controls and save them
        setAntennaButtonsLabels();
        
        // Open new comport if name has changed
        if(serialComm.getName().compareTo(appSettings.getComPort()) != 0)
        {
            serialComm.close();
            serialComm.open(appSettings.getComPort()); 
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

  private void jCheckBoxPeriodicSwitchingActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxPeriodicSwitchingActionPerformed
  {//GEN-HEADEREND:event_jCheckBoxPeriodicSwitchingActionPerformed
      if (jCheckBoxPeriodicSwitching.isSelected())
      {
          jDialogPeriodicSwitching.pack();
          jDialogPeriodicSwitching.setVisible(true);
      } else
      {
          jDialogPeriodicSwitching.setVisible(false);
      }

  }//GEN-LAST:event_jCheckBoxPeriodicSwitchingActionPerformed

    private void jButtonSetPeriodSwitchingActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSetPeriodSwitchingActionPerformed
    {//GEN-HEADEREND:event_jButtonSetPeriodSwitchingActionPerformed
        storeSwitchingDialogParams();
    }//GEN-LAST:event_jButtonSetPeriodSwitchingActionPerformed

    private void jToggleButtonAnt1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonAnt1ActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonAnt1ActionPerformed
        serialComm.setAntenna(ANT_1);
    }//GEN-LAST:event_jToggleButtonAnt1ActionPerformed

    private void jToggleButtonAnt2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonAnt2ActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonAnt2ActionPerformed
        serialComm.setAntenna(ANT_2);
    }//GEN-LAST:event_jToggleButtonAnt2ActionPerformed

    private void jToggleButtonAnt3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonAnt3ActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonAnt3ActionPerformed
        serialComm.setAntenna(ANT_3);
    }//GEN-LAST:event_jToggleButtonAnt3ActionPerformed

    private void jToggleButtonAnt4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonAnt4ActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonAnt4ActionPerformed
        serialComm.setAntenna(ANT_4);
    }//GEN-LAST:event_jToggleButtonAnt4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.ButtonGroup buttonGroupAntennas;
    private javax.swing.ButtonGroup buttonGroupDebugWindow;
    private javax.swing.ButtonGroup buttonGroupInSettings;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButtonAboutOk;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSetPeriodSwitching;
    private javax.swing.JCheckBox jCheckBoxAnt1;
    private javax.swing.JCheckBox jCheckBoxAnt2;
    private javax.swing.JCheckBox jCheckBoxAnt3;
    private javax.swing.JCheckBox jCheckBoxAnt4;
    private javax.swing.JCheckBox jCheckBoxPeriodicSwitching;
    private javax.swing.JComboBox jComboBoxBaudRate;
    private javax.swing.JComboBox jComboBoxComPort;
    private javax.swing.JDialog jDialogAbout;
    private javax.swing.JDialog jDialogPeriodicSwitching;
    private javax.swing.JDialog jDialogSettings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelSerialComm;
    private javax.swing.JMenuItem jMenuSettigns;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextFieldAnt1Label;
    private javax.swing.JTextField jTextFieldAnt2Label;
    private javax.swing.JTextField jTextFieldAnt3Label;
    private javax.swing.JTextField jTextFieldAnt4Label;
    private javax.swing.JTextField jTextFieldCustomCommPort;
    private javax.swing.JTextField jTextFieldSwitchingPeriodAnt1;
    private javax.swing.JTextField jTextFieldSwitchingPeriodAnt2;
    private javax.swing.JTextField jTextFieldSwitchingPeriodAnt3;
    private javax.swing.JTextField jTextFieldSwitchingPeriodAnt4;
    private javax.swing.JToggleButton jToggleButtonAnt1;
    private javax.swing.JToggleButton jToggleButtonAnt2;
    private javax.swing.JToggleButton jToggleButtonAnt3;
    private javax.swing.JToggleButton jToggleButtonAnt4;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

    public DefaultComboBoxModel getBaudRateComboBoxModel()
    {
        return baudRateComboBoxModel;
    }

    /* Store all the applications params that we would like to restore when the app is started again*/
    private void storeMainWindowParams()
    {
        if (this.getExtendedState() != MAXIMIZED_BOTH)
        {
            appSettings.setJFrameDimensions(this.getBounds());
        }
        appSettings.setLastUsedAntenna(getCurrentAntenna());
        appSettings.SaveSettingsToDisk();
    }

    /**
     * Get the number of the currently selected antenna
     *
     * @return ANT_1 to ANT_4
     */
    private int getCurrentAntenna()
    {
        if (jToggleButtonAnt1.isSelected())
        {
            return ANT_1;
        } else if (jToggleButtonAnt2.isSelected())
        {
            return ANT_2;
        } else if (jToggleButtonAnt3.isSelected())
        {
            return ANT_3;
        } else if (jToggleButtonAnt4.isSelected())
        {
            return ANT_4;
        } else
        {
            throw new InternalError("No antenna is selected!");
        }
    }

    
    private void loadAppState()
    {
        // Read last used JFrame dimensions and restore it
        this.setBounds(appSettings.getJFrameDimensions()); 
        // 
        setAntennaButtonsLabels();
        // Select the antenna that was last used
        pressAntennaButton(appSettings.getLastUsedAntenna());
    }

    
    /* Selects the antenna that was last used when the application closed */
    private void pressAntennaButton(int antenna)
    {
        switch (antenna)
        {
            case ANT_1:
                jToggleButtonAnt1.setSelected(true);
                break;
            case ANT_2:
                jToggleButtonAnt2.setSelected(true);
                break;
            case ANT_3:
                jToggleButtonAnt3.setSelected(true);
                break;
            case ANT_4:
                jToggleButtonAnt4.setSelected(true);
                break;
        }
    }

    /* Sets the labels of the antenna buttons.*/
    private void setAntennaButtonsLabels()
    {
        jToggleButtonAnt1.setText(appSettings.getAntennaLabel(0));
        jToggleButtonAnt2.setText(appSettings.getAntennaLabel(1));
        jToggleButtonAnt3.setText(appSettings.getAntennaLabel(2));
        jToggleButtonAnt4.setText(appSettings.getAntennaLabel(3));
    }


    /**
     * User has closed the Setting dialog and we need to save the data
     */
    private void storeSettingsDialogParams()
    {
        // CommPort 
        if (!jTextFieldCustomCommPort.getText().isEmpty()) // CustomComPort is used
        {
            appSettings.setComPort(jTextFieldCustomCommPort.getText());
        } else
        {
            if (jComboBoxComPort.getSelectedItem() != null) // Use CommPort from the list
            {
                appSettings.setComPort(jComboBoxComPort.getSelectedItem().toString());
            } else  // Empty
            {
                appSettings.setComPort("");
            }
        }

        appSettings.setBaudRate(jComboBoxBaudRate.getSelectedItem().toString());

        // Labels for the antenna buttons
        appSettings.setAntennaLabel(0, jTextFieldAnt1Label.getText());
        appSettings.setAntennaLabel(1, jTextFieldAnt2Label.getText());
        appSettings.setAntennaLabel(2, jTextFieldAnt3Label.getText());
        appSettings.setAntennaLabel(3, jTextFieldAnt4Label.getText());

        appSettings.SaveSettingsToDisk();
    }

    /**
     * User has pressed the Set button in the Switching dialog and now we store
     * the settings
     */
    void storeSwitchingDialogParams()
    {
        // Store which antennas are checked
        appSettings.setIsAntennaCycled(0, jCheckBoxAnt1.isSelected());
        appSettings.setIsAntennaCycled(1, jCheckBoxAnt2.isSelected());
        appSettings.setIsAntennaCycled(2, jCheckBoxAnt3.isSelected());
        appSettings.setIsAntennaCycled(3, jCheckBoxAnt4.isSelected());

        // Store the switching periods for each antenna
        int period = convertStringPeriodToInt(jTextFieldSwitchingPeriodAnt1.getText());
        appSettings.setAntennaSwitchingPeriod(0, period);
        jTextFieldSwitchingPeriodAnt1.setText(Integer.toString(period)); // set the actual period

        period = convertStringPeriodToInt(jTextFieldSwitchingPeriodAnt2.getText());
        appSettings.setAntennaSwitchingPeriod(1, period);
        jTextFieldSwitchingPeriodAnt2.setText(Integer.toString(period)); // set the actual period

        period = convertStringPeriodToInt(jTextFieldSwitchingPeriodAnt3.getText());
        appSettings.setAntennaSwitchingPeriod(2, period);
        jTextFieldSwitchingPeriodAnt3.setText(Integer.toString(period)); // set the actual period

        period = convertStringPeriodToInt(jTextFieldSwitchingPeriodAnt4.getText());
        appSettings.setAntennaSwitchingPeriod(3, period);
        jTextFieldSwitchingPeriodAnt4.setText(Integer.toString(period)); // set the actual period
    }

    /**
     * Converts the string into integer and in the process validates if the
     * value has the expected value.
     *
     * @param period Period in milliseconds
     */
    private int convertStringPeriodToInt(String stingPeriod)
    {
        int period;

        try
        {
            period = Integer.parseInt(stingPeriod);
        } catch (NumberFormatException exc)
        {
            period = DEFAULT_SWITCHING_PERIOD_IN_MS;
            return period; // Return default value if the user didn't enter a number
        }

        if (period < MIN_SWITCHING_PERIOD_IN_MS)
        {
            period = MIN_SWITCHING_PERIOD_IN_MS;
        } else if (period > MAX_SWITCHING_PERIOD_IN_MS)
        {
            period = MAX_SWITCHING_PERIOD_IN_MS;
        }
        return period;
    }

    /**
     * User has opened the setting dialog and we need to load the state of the
     * controls
     */
    private void initUserSettingsDialog()
    {
        // ComPort
        if (comPortComboBoxModel.getIndexOf(appSettings.getComPort()) >= 0)
        {//If standart ComPort is set...
            jComboBoxComPort.setSelectedItem(appSettings.getComPort());
            jTextFieldCustomCommPort.setText(""); // Custom 
        } else
        {
            jTextFieldCustomCommPort.setText(appSettings.getComPort());
        }

        jComboBoxBaudRate.setSelectedItem(appSettings.getBaudRate());

        // Labels for the antenna buttons
        jTextFieldAnt1Label.setText(appSettings.getAntennaLabel(0));
        jTextFieldAnt2Label.setText(appSettings.getAntennaLabel(1));
        jTextFieldAnt3Label.setText(appSettings.getAntennaLabel(2));
        jTextFieldAnt4Label.setText(appSettings.getAntennaLabel(3));
    }

    void initPeriodicSwtchingDialog()
    {
        // Antenna names
        jCheckBoxAnt1.setText(appSettings.getAntennaLabel(0));
        jCheckBoxAnt2.setText(appSettings.getAntennaLabel(1));
        jCheckBoxAnt3.setText(appSettings.getAntennaLabel(2));
        jCheckBoxAnt4.setText(appSettings.getAntennaLabel(3));

        // Which antennas are enabled
        jCheckBoxAnt1.setSelected(appSettings.getIsAntennaCycled(0));
        jCheckBoxAnt2.setSelected(appSettings.getIsAntennaCycled(1));
        jCheckBoxAnt3.setSelected(appSettings.getIsAntennaCycled(2));
        jCheckBoxAnt4.setSelected(appSettings.getIsAntennaCycled(3));

        // Antenna periods
        jTextFieldSwitchingPeriodAnt1.setText(Integer.toString(appSettings.getAntennaSwitchingPeriod(0)));
        jTextFieldSwitchingPeriodAnt2.setText(Integer.toString(appSettings.getAntennaSwitchingPeriod(1)));
        jTextFieldSwitchingPeriodAnt3.setText(Integer.toString(appSettings.getAntennaSwitchingPeriod(2)));
        jTextFieldSwitchingPeriodAnt4.setText(Integer.toString(appSettings.getAntennaSwitchingPeriod(3)));
    }
    
    
    /**
     * Cycles currentAnt to the next antenna that is to be switched
     *
     * Example: currentAnt is ANT_3 and we have the following antenna selection:
     * ANT_1 - no checked ANT_2 - checked ANT_3 - checked ANT_4 - not checked.
     *
     * In this case the currentAnt will be set to ANT2
     *
     * @return From ANT1 to ANT4 and ANT_NOTSET if no antenna is selected
     */
    void setNextSelectedAntenna()
    {
        // Find selected antennas
        boolean[] isAntennaSelected = new boolean[AppSettings.ANTENNA_COUNT];
        isAntennaSelected[ANT_1] = jCheckBoxAnt1.isSelected();
        isAntennaSelected[ANT_2] = jCheckBoxAnt2.isSelected();
        isAntennaSelected[ANT_3] = jCheckBoxAnt3.isSelected();
        isAntennaSelected[ANT_4] = jCheckBoxAnt4.isSelected();

        // Traverse all antennas
        for (int i = 0; i < AppSettings.ANTENNA_COUNT; i++)
        {
            currentAnt++;
            if (currentAnt > ANT_4)
            {
                currentAnt = ANT_1;
            }

            if (isAntennaSelected[currentAnt])
            {
                return; // found next
            }
        }

        currentAnt = ANT_NOTSET; // We didn't find selected antenna
    }

    
    /**
     * Handler for the automatic direction switching
     */
    private final ActionListener directionSwitchingListener = new ActionListener()
    {
        @Override
        public void actionPerformed(ActionEvent evt)
        {
            // Update the variable: currentAnt
            setNextSelectedAntenna();

            // Start timer for the required period
            if (currentAnt == ANT_NOTSET)
            {
                switchingTimer.setDelay(200); // let's come back in 100ms and check if the user has selected antennas to be cycled
                switchingTimer.start();
            } else
            {
                pressAntennaButton(currentAnt);

                int perdiod = appSettings.getAntennaSwitchingPeriod(currentAnt);
                switchingTimer.setInitialDelay(perdiod);
                switchingTimer.start();
            }
        }
    };
}
