package org.lz1aq.aaacontroller;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JToggleButton;
import javax.swing.Timer;



/**
 *
 * @author Chavdar
 */
public class App extends javax.swing.JFrame {   
    
    private static final long serialVersionUID = 1L;
    
    static final int MIN_SWITCHING_SPEED_IN_MS      = 200;
    static final int DEFAULT_SWITCHING_SPEED_IN_MS  = 1000;
    static final int MAX_SWITCHING_SPEED_IN_MS      = 60000;

    private final AppSettings  appSettings;
    private final SerialComm   serialComm;
    
    private final DefaultComboBoxModel  comPortComboBoxModel;
    private final DefaultComboBoxModel  baudRateComboBoxModel;
    private final DefaultComboBoxModel  deviceIdComboBoxModel;
   
    static final int MIN_FB_SWITCHING_RATIO = 1;
    static final int DEFAULT_FB_SWITCHING_RATIO = 3; 
    static final int MAX_FB_SWITCHING_RATIO = 10;
    private int fbSwitchingRatio = DEFAULT_FB_SWITCHING_RATIO;
    private int counter3to1ratio = 0;
    
    private Timer timerForDirectionSwitching;    
//    private final ActionListener directionSwitching = new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt)
//            {
//              if(jRadioButtonAllDirections.isSelected())
//              {
//                toggleAllDirections();
//              }
//              else
//              {
//                // Plus dirctions will be equal or longer than the Minus directions 
//                // where fbSwitchingRatio specifies the ratio
//                if(getAntennaDirectionButton(AntennaDirections.plusY).isSelected() ||
//                   getAntennaDirectionButton(AntennaDirections.plusX).isSelected())
//                {
//                  //skip two time intervals
//                  counter3to1ratio++;
//                  if(counter3to1ratio<fbSwitchingRatio)
//                    return;
//                  else
//                    counter3to1ratio = 0;
//                }
//                toggleFrontAndBack();
//                
//              }
//            }
//    };        
   
    
    
    /**
     * Constructor
     */
    public App() 
    {  
        // Data for the Combo boxes in the settings Dialog
        this.baudRateComboBoxModel = new DefaultComboBoxModel(new String[] { "1200", "2400", "4800", "9600", "19200", "38400", "57600", "115200" });
        this.comPortComboBoxModel  = SerialComm.getComportsComboboxModel();
        this.deviceIdComboBoxModel = new DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"});
                
        // Load user settings from the properties file
        appSettings = new AppSettings();
        
        // Create the object which will take care of sending data through the UART
        serialComm = new SerialComm();
        
        // Print the working path and the 
//        System.out.println("Working Directory = " +
//                System.getProperty("user.dir"));
//        System.out.println("java.library.path = " + System.getProperty("java.library.path"));
        //System.setProperty("java.library.path", yourPath); // not used 
        
        // Init GUI
        initComponents();    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    jDialogSettings = new javax.swing.JDialog();
    jPanel1 = new javax.swing.JPanel();
    jPanel4 = new javax.swing.JPanel();
    jComboBoxDeviceId = new javax.swing.JComboBox();
    jComboBoxComPort = new javax.swing.JComboBox();
    jComboBoxBaudRate = new javax.swing.JComboBox();
    jLabel7 = new javax.swing.JLabel();
    jLabel12 = new javax.swing.JLabel();
    jLabel13 = new javax.swing.JLabel();
    jLabel18 = new javax.swing.JLabel();
    jTextFieldCustomCommPort = new javax.swing.JTextField();
    jPanel5 = new javax.swing.JPanel();
    jButtonCancel = new javax.swing.JButton();
    jButtonSave = new javax.swing.JButton();
    buttonGroupInSettings = new javax.swing.ButtonGroup();
    buttonGroupAntennas = new javax.swing.ButtonGroup();
    jDialogPeriodicSwitching = new javax.swing.JDialog();
    jPanel2 = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jCheckBox2 = new javax.swing.JCheckBox();
    jCheckBox3 = new javax.swing.JCheckBox();
    jCheckBox4 = new javax.swing.JCheckBox();
    jCheckBox5 = new javax.swing.JCheckBox();
    jButton1 = new javax.swing.JButton();
    jTextField2 = new javax.swing.JTextField();
    jTextField4 = new javax.swing.JTextField();
    jTextField5 = new javax.swing.JTextField();
    jTextField6 = new javax.swing.JTextField();
    jDialogAbout = new javax.swing.JDialog();
    jButton2 = new javax.swing.JButton();
    jLabel11 = new javax.swing.JLabel();
    jTextField1 = new javax.swing.JTextField();
    jLabel10 = new javax.swing.JLabel();
    jLabel14 = new javax.swing.JLabel();
    jTextField3 = new javax.swing.JTextField();
    buttonGroupDebugWindow = new javax.swing.ButtonGroup();
    jPanel11 = new javax.swing.JPanel();
    jToggleButtonAnt1 = new javax.swing.JToggleButton();
    jToggleButtonAnt2 = new javax.swing.JToggleButton();
    jToggleButtonAnt3 = new javax.swing.JToggleButton();
    jToggleButtonAnt4 = new javax.swing.JToggleButton();
    jPanel12 = new javax.swing.JPanel();
    jLabelSerialComm = new javax.swing.JLabel();
    jCheckBoxPeriodicSwitching = new javax.swing.JCheckBox();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    jMenuSettigns = new javax.swing.JMenuItem();
    jMenuDebugMode = new javax.swing.JMenuItem();
    exitMenuItem = new javax.swing.JMenuItem();
    helpMenu = new javax.swing.JMenu();
    aboutMenuItem = new javax.swing.JMenuItem();

    jDialogSettings.setTitle("Settings");
    jDialogSettings.setAlwaysOnTop(true);
    jDialogSettings.setModal(true);
    jDialogSettings.addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        jDialogSettingsComponentShown(evt);
      }
    });
    jDialogSettings.getContentPane().setLayout(new java.awt.GridBagLayout());

    jPanel1.setLayout(new java.awt.GridBagLayout());

    jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("CommPort settings"));
    jPanel4.setLayout(new java.awt.GridBagLayout());

    jComboBoxDeviceId.setModel(deviceIdComboBoxModel);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
    jPanel4.add(jComboBoxDeviceId, gridBagConstraints);

    jComboBoxComPort.setModel(this.comPortComboBoxModel);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    jPanel4.add(jComboBoxComPort, gridBagConstraints);

    jComboBoxBaudRate.setModel(this.getBaudRateComboBoxModel());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
    jPanel4.add(jComboBoxBaudRate, gridBagConstraints);

    jLabel7.setText("Device ID");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
    jPanel4.add(jLabel7, gridBagConstraints);

    jLabel12.setText("CommPort name");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    jPanel4.add(jLabel12, gridBagConstraints);

    jLabel13.setText("Baud rate");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
    jPanel4.add(jLabel13, gridBagConstraints);

    jLabel18.setText("Custom ComPort name");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    jPanel4.add(jLabel18, gridBagConstraints);

    jTextFieldCustomCommPort.setText("jTextField5");
    jTextFieldCustomCommPort.setToolTipText("Make sure this field is empty if you don't want to use a custom comport!");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    jPanel4.add(jTextFieldCustomCommPort, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    jPanel1.add(jPanel4, gridBagConstraints);

    jPanel5.setLayout(new java.awt.GridBagLayout());

    jButtonCancel.setText("Cancel");
    jButtonCancel.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonCancelActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 5);
    jPanel5.add(jButtonCancel, gridBagConstraints);

    jButtonSave.setText("Save");
    jButtonSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonSaveActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 2);
    jPanel5.add(jButtonSave, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    jPanel1.add(jPanel5, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jDialogSettings.getContentPane().add(jPanel1, gridBagConstraints);

    jDialogPeriodicSwitching.setTitle("Periodic antenna switching");
    jDialogPeriodicSwitching.setAlwaysOnTop(true);
    jDialogPeriodicSwitching.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
    jDialogPeriodicSwitching.addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        jDialogPeriodicSwitchingComponentShown(evt);
      }
      public void componentHidden(java.awt.event.ComponentEvent evt)
      {
        jDialogPeriodicSwitchingComponentHidden(evt);
      }
    });

    jPanel2.setLayout(new java.awt.GridBagLayout());

    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel2.setText("Antenna");
    jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
    jPanel2.add(jLabel2, gridBagConstraints);

    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel3.setText("Period [ms]");
    jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
    jPanel2.add(jLabel3, gridBagConstraints);

    jCheckBox2.setText("jCheckBox2");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    jPanel2.add(jCheckBox2, gridBagConstraints);

    jCheckBox3.setText("jCheckBox3");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    jPanel2.add(jCheckBox3, gridBagConstraints);

    jCheckBox4.setText("jCheckBox4");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    jPanel2.add(jCheckBox4, gridBagConstraints);

    jCheckBox5.setText("jCheckBox5");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    jPanel2.add(jCheckBox5, gridBagConstraints);

    jButton1.setText("Close");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
    jPanel2.add(jButton1, gridBagConstraints);

    jTextField2.setText("jTextField2");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    jPanel2.add(jTextField2, gridBagConstraints);

    jTextField4.setText("jTextField4");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    jPanel2.add(jTextField4, gridBagConstraints);

    jTextField5.setText("jTextField5");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    jPanel2.add(jTextField5, gridBagConstraints);

    jTextField6.setText("jTextField6");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    jPanel2.add(jTextField6, gridBagConstraints);

    javax.swing.GroupLayout jDialogPeriodicSwitchingLayout = new javax.swing.GroupLayout(jDialogPeriodicSwitching.getContentPane());
    jDialogPeriodicSwitching.getContentPane().setLayout(jDialogPeriodicSwitchingLayout);
    jDialogPeriodicSwitchingLayout.setHorizontalGroup(
      jDialogPeriodicSwitchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
    );
    jDialogPeriodicSwitchingLayout.setVerticalGroup(
      jDialogPeriodicSwitchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
    );

    jDialogAbout.setTitle("About");
    jDialogAbout.setAlwaysOnTop(true);
    jDialogAbout.setModal(true);
    jDialogAbout.setResizable(false);

    jButton2.setText("OK");
    jButton2.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton2ActionPerformed(evt);
      }
    });

    jLabel11.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
    jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel11.setText("Source code available at ");

    jTextField1.setEditable(false);
    jTextField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    jTextField1.setText("www.active-antenna.eu");
    jTextField1.setToolTipText("");
    jTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel10.setText("by LZ1AQ");

    jLabel14.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
    jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel14.setText("Serial Interface to LZ1AQ's AAA Controller ");

    jTextField3.setEditable(false);
    jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    jTextField3.setText("github.com/potty-dzmeia/AaaController");
    jTextField3.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jTextField3ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jDialogAboutLayout = new javax.swing.GroupLayout(jDialogAbout.getContentPane());
    jDialogAbout.getContentPane().setLayout(jDialogAboutLayout);
    jDialogAboutLayout.setHorizontalGroup(
      jDialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jDialogAboutLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jDialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
          .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jTextField3)
          .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    jDialogAboutLayout.setVerticalGroup(
      jDialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jDialogAboutLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel10)
        .addGap(30, 30, 30)
        .addComponent(jLabel11)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jButton2)
        .addContainerGap())
    );

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Serial Interface to LZ1AQ's Active Antenna Amplifier");
    setMinimumSize(new java.awt.Dimension(200, 200));
    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowOpened(java.awt.event.WindowEvent evt)
      {
        formWindowOpened(evt);
      }
      public void windowClosing(java.awt.event.WindowEvent evt)
      {
        formWindowClosing(evt);
      }
    });
    getContentPane().setLayout(new java.awt.GridBagLayout());

    jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Antennas"));
    jPanel11.setLayout(new java.awt.GridBagLayout());

    buttonGroupAntennas.add(jToggleButtonAnt1);
    jToggleButtonAnt1.setText("Ant 1");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    jPanel11.add(jToggleButtonAnt1, gridBagConstraints);

    buttonGroupAntennas.add(jToggleButtonAnt2);
    jToggleButtonAnt2.setText("Ant 2");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    jPanel11.add(jToggleButtonAnt2, gridBagConstraints);

    buttonGroupAntennas.add(jToggleButtonAnt3);
    jToggleButtonAnt3.setText("Ant 3");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    jPanel11.add(jToggleButtonAnt3, gridBagConstraints);

    buttonGroupAntennas.add(jToggleButtonAnt4);
    jToggleButtonAnt4.setText("Ant 4");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    jPanel11.add(jToggleButtonAnt4, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
    getContentPane().add(jPanel11, gridBagConstraints);

    jPanel12.setLayout(new java.awt.GridBagLayout());

    jLabelSerialComm.setText("Serial Comm:");
    jLabelSerialComm.setMinimumSize(null);
    jLabelSerialComm.setPreferredSize(null);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.1;
    jPanel12.add(jLabelSerialComm, gridBagConstraints);
    jLabelSerialComm.getAccessibleContext().setAccessibleName("jLabelSerialComm");
    jLabelSerialComm.getAccessibleContext().setAccessibleDescription("");

    jCheckBoxPeriodicSwitching.setText("Periodic switching");
    jCheckBoxPeriodicSwitching.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel12.add(jCheckBoxPeriodicSwitching, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
    getContentPane().add(jPanel12, gridBagConstraints);

    fileMenu.setMnemonic('f');
    fileMenu.setText("File");
    fileMenu.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyPressed(java.awt.event.KeyEvent evt)
      {
        fileMenuKeyPressed(evt);
      }
    });

    jMenuSettigns.setText("Settings");
    jMenuSettigns.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSettignsActionPerformed(evt);
      }
    });
    fileMenu.add(jMenuSettigns);

    jMenuDebugMode.setText("Debug mode");
    jMenuDebugMode.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuDebugModeActionPerformed(evt);
      }
    });
    fileMenu.add(jMenuDebugMode);

    exitMenuItem.setMnemonic('x');
    exitMenuItem.setText("Exit");
    exitMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        exitMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    helpMenu.setMnemonic('h');
    helpMenu.setText("Help");

    aboutMenuItem.setMnemonic('a');
    aboutMenuItem.setText("About");
    aboutMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        aboutMenuItemActionPerformed(evt);
      }
    });
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void fileMenuKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileMenuKeyPressed
        
    }//GEN-LAST:event_fileMenuKeyPressed

    private void jDialogSettingsComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jDialogSettingsComponentShown
    {//GEN-HEADEREND:event_jDialogSettingsComponentShown
        // Settings dialog is shown and we need to set the states of the controls
        loadUserSettings();
    }//GEN-LAST:event_jDialogSettingsComponentShown

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        // Read last used JFrame dimensions and restore it
        this.setBounds(appSettings.getJFrameDimensions());
        
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        // Before closing we need to save the dimensions of the JFrame
        if(this.getExtendedState()==MAXIMIZED_BOTH)
            return; // do not save if maximized
        appSettings.setJFrameDimensions(this.getBounds());
        appSettings.SaveSettingsToDisk();
        serialComm.close();
    }//GEN-LAST:event_formWindowClosing

    private void jDialogPeriodicSwitchingComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jDialogPeriodicSwitchingComponentShown
    {//GEN-HEADEREND:event_jDialogPeriodicSwitchingComponentShown
//        int speed = 100; //Integer.parseInt(jTextFieldDebugSwitchingSpeed.getText());
//        
//        // Star the timer responsible for direction switching
//        timerForDirectionSwitching = new Timer(speed, directionSwitching);
//        timerForDirectionSwitching.setRepeats(true);
//        timerForDirectionSwitching.start();
    }//GEN-LAST:event_jDialogPeriodicSwitchingComponentShown

    private void jDialogPeriodicSwitchingComponentHidden(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jDialogPeriodicSwitchingComponentHidden
    {//GEN-HEADEREND:event_jDialogPeriodicSwitchingComponentHidden
        timerForDirectionSwitching.stop();
    }//GEN-LAST:event_jDialogPeriodicSwitchingComponentHidden

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitMenuItemActionPerformed
    {//GEN-HEADEREND:event_exitMenuItemActionPerformed
        serialComm.close();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jMenuSettignsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSettignsActionPerformed
    {//GEN-HEADEREND:event_jMenuSettignsActionPerformed
        jDialogSettings.pack();
        jDialogSettings.setVisible(true);
    }//GEN-LAST:event_jMenuSettignsActionPerformed

    private void jMenuDebugModeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuDebugModeActionPerformed
    {//GEN-HEADEREND:event_jMenuDebugModeActionPerformed
        jDialogPeriodicSwitching.pack();
        jDialogPeriodicSwitching.setVisible(true);
    }//GEN-LAST:event_jMenuDebugModeActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
        jDialogAbout.pack();
        jDialogAbout.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        jDialogAbout.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonCancelActionPerformed
    {//GEN-HEADEREND:event_jButtonCancelActionPerformed
        jDialogSettings.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveActionPerformed
    {//GEN-HEADEREND:event_jButtonSaveActionPerformed
        jDialogSettings.setVisible(false); // Hide the SettingsDialog
        saveUserSettings(); // Read the state of the controls and save them
        setAntennaButtonsLabels();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextField3ActionPerformed
    {//GEN-HEADEREND:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new App().setVisible(true);
            }
        });
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.ButtonGroup buttonGroupAntennas;
  private javax.swing.ButtonGroup buttonGroupDebugWindow;
  private javax.swing.ButtonGroup buttonGroupInSettings;
  private javax.swing.JMenuItem exitMenuItem;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButtonCancel;
  private javax.swing.JButton jButtonSave;
  private javax.swing.JCheckBox jCheckBox2;
  private javax.swing.JCheckBox jCheckBox3;
  private javax.swing.JCheckBox jCheckBox4;
  private javax.swing.JCheckBox jCheckBox5;
  private javax.swing.JCheckBox jCheckBoxPeriodicSwitching;
  private javax.swing.JComboBox jComboBoxBaudRate;
  private javax.swing.JComboBox jComboBoxComPort;
  private javax.swing.JComboBox jComboBoxDeviceId;
  private javax.swing.JDialog jDialogAbout;
  private javax.swing.JDialog jDialogPeriodicSwitching;
  private javax.swing.JDialog jDialogSettings;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel11;
  private javax.swing.JLabel jLabel12;
  private javax.swing.JLabel jLabel13;
  private javax.swing.JLabel jLabel14;
  private javax.swing.JLabel jLabel18;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabelSerialComm;
  private javax.swing.JMenuItem jMenuDebugMode;
  private javax.swing.JMenuItem jMenuSettigns;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel11;
  private javax.swing.JPanel jPanel12;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JTextField jTextField1;
  private javax.swing.JTextField jTextField2;
  private javax.swing.JTextField jTextField3;
  private javax.swing.JTextField jTextField4;
  private javax.swing.JTextField jTextField5;
  private javax.swing.JTextField jTextField6;
  private javax.swing.JTextField jTextFieldCustomCommPort;
  private javax.swing.JToggleButton jToggleButtonAnt1;
  private javax.swing.JToggleButton jToggleButtonAnt2;
  private javax.swing.JToggleButton jToggleButtonAnt3;
  private javax.swing.JToggleButton jToggleButtonAnt4;
  private javax.swing.JMenuBar menuBar;
  // End of variables declaration//GEN-END:variables

  public DefaultComboBoxModel getBaudRateComboBoxModel()
  {
    return baudRateComboBoxModel;
  }

  /* Sets the labels of the direction buttons.*/
  private void setAntennaButtonsLabels()
  {
    jToggleButtonAnt1.setText(appSettings.getLabelAnt1());
    jToggleButtonAnt2.setText(appSettings.getLabelAnt2());
    jToggleButtonAnt3.setText(appSettings.getLabelAnt3());
    jToggleButtonAnt4.setText(appSettings.getLabelAnt4());
  }
  

  /**
   * Sends a command to the AAA Controller device
   */
  private void sendSerialCommand()
  {
//    try
//    {
//      // Send the command to the AAA Controller device
//      serialComm.sendCommand(appSettings.getComPort(),
//              Integer.parseInt(appSettings.getBaudRate()),
//              Byte.parseByte(appSettings.getDeviceId()),
//              dLineApplicationState.getState());
//      // Draw the command being send at the bottom of the jFrame
//      final Dimension size = jLabelSerialComm.getPreferredSize();
//      jLabelSerialComm.setMinimumSize(size);
//      jLabelSerialComm.setPreferredSize(size);
//      jLabelSerialComm.setText(appSettings.getComPort() + ": " + String.format("%8s", Integer.toBinaryString(dLineApplicationState.getState())).replace(" ", "0"));
//    } catch (Exception ex)
//    {
//      // Draw debug info at the bottom of the jFrame
//      final Dimension size = jLabelSerialComm.getPreferredSize();
//      jLabelSerialComm.setMinimumSize(size);
//      jLabelSerialComm.setPreferredSize(size);
//      jLabelSerialComm.setText(appSettings.getComPort() + ": " + ex.toString());
//      Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
//    }
  }
  

  /**
   * When called this will change the current direction to the opposite of
   * the current one (i.e. Front and Back)
   */
  private void toggleFrontAndBack()
  {
//    if(getAntennaDirectionButton(AntennaDirections.plusY).isSelected())
//    {
//      getAntennaDirectionButton(AntennaDirections.minusY).setSelected(true);
//    }
//    else if(getAntennaDirectionButton(AntennaDirections.minusX).isSelected())
//    {
//      getAntennaDirectionButton(AntennaDirections.plusX).setSelected(true);
//    }
//    else if(getAntennaDirectionButton(AntennaDirections.minusY).isSelected())
//    {
//      getAntennaDirectionButton(AntennaDirections.plusY).setSelected(true);
//    }
//    else // plusX
//    {
//      getAntennaDirectionButton(AntennaDirections.minusX).setSelected(true);
//    }
  }
  
  
  /**
   * When called this function will change the current direction (clockwise)
   */
  private void toggleAllDirections()
  {
//    if(getAntennaDirectionButton(AntennaDirections.plusY).isSelected())
//    {
//      getAntennaDirectionButton(AntennaDirections.minusX).setSelected(true);
//    }
//    else if(getAntennaDirectionButton(AntennaDirections.minusX).isSelected())
//    {
//      getAntennaDirectionButton(AntennaDirections.minusY).setSelected(true);
//    }
//    else if(getAntennaDirectionButton(AntennaDirections.minusY).isSelected())
//    {
//      getAntennaDirectionButton(AntennaDirections.plusX).setSelected(true);
//    }
//    else
//    {
//      getAntennaDirectionButton(AntennaDirections.plusY).setSelected(true);
//    }
  }

  
  /**
   * User has closed the setting dialog and we need to save the state of the
   * controls
   */
  private void saveUserSettings()
  {
    appSettings.setDeviceId(jComboBoxDeviceId.getSelectedItem().toString());

    
    // In case there is CustomComPort defined we will use it...
    if(!jTextFieldCustomCommPort.getText().isEmpty())
    {
      appSettings.setComPort(jTextFieldCustomCommPort.getText());
    }
    else
    {
      if (jComboBoxComPort.getSelectedItem() != null)
      {
        appSettings.setComPort(jComboBoxComPort.getSelectedItem().toString());
      }
    }
    
    appSettings.setBaudRate(jComboBoxBaudRate.getSelectedItem().toString());
    
    appSettings.SaveSettingsToDisk();
  }

  
  
  /**
   * User has opened the setting dialog and we need to load the state of the
   * controls
   */
  private void loadUserSettings()
  {
    jComboBoxDeviceId.setSelectedItem(appSettings.getDeviceId());


    // If standart ComPort is set...
    if(comPortComboBoxModel.getIndexOf(appSettings.getComPort()) >= 0)
    {
      jComboBoxComPort.setSelectedItem(appSettings.getComPort());
      jTextFieldCustomCommPort.setText(""); // Custom 
    }
    else
    {
      jTextFieldCustomCommPort.setText(appSettings.getComPort());
    }
           
    
    jComboBoxBaudRate.setSelectedItem(appSettings.getBaudRate());
  }
  
}
